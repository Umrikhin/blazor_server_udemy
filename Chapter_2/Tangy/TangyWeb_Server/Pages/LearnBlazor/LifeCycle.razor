@page "/learnBlazor/lifecycle"
@using System.Threading

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Нажми меня</button>
<br />
@Count <button class="btn btn-secondary m-2" @onclick="StartCoundown">Обратный отсчет</button>

<div class="border bg-light mt-2">
    <_LifeCycleChild CountValue="currentCount"></_LifeCycleChild>
</div>

<hr />
@foreach(var item in EventType)
{
    @item
    <hr />
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();
    private int Count { get; set; } = 5;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized вызван");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync вызван");
        //await Task.Delay(3000);
    }

    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet вызван");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync вызван");
        //await Task.Delay(3000);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 999;
        }
        EventType.Add("OnAfterRender вызван");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync вызван");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender вызван");
        return true;
    }

    void StartCoundown()
    {
        var timer = new Timer(TimeCallback, null, 1000, 1000);
    }


    void TimeCallback(object state)
    {
        if (Count > 0)
        {
            Count--;
            //InvokeAsync(StateHasChanged);
        }
    }
}
